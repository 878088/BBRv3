name: Build Kernel BBRv3
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Person to greet'
        default: 'World'
        required: true
        type: string
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 512
          remove-dotnet: 'true'
          remove-android: 'true'            
      - name: Checkout
        uses: actions/checkout@main      
      - uses: actions/setup-node@v3.8.1
        with:
          node-version: '18'
      - name: install
        run: bash install.sh
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1.9.0
        with:
          version: "16"
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Get Latest Kernel Branch
        id: get_latest_branch
        run: |
          url="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
          html=$(curl -s "$url")
          branches=$(echo "$html" | grep -oP '/pub/scm/linux/kernel/git/stable/linux.git/log/\?h=\K[^<]*' | grep -v 'linux-rolling-stable' | grep -v 'linux-rolling-lts')
          latest_branch=$(echo "$branches" | sort -Vr | head -n 1)
          latest_branch_clean=$(echo "$latest_branch" | sed 's/.*>//')
          echo "LATEST_KERNEL_BRANCH=$latest_branch_clean" >> $GITHUB_ENV
      - name: Clone, configure kernel and get .config
        run: |
          git clone --branch $LATEST_KERNEL_BRANCH --jobs=0 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          cd linux
          git config --local user.email "${{ secrets.USER_EMAIL }}"
          git config --local user.name "${{ secrets.USER_NAME }}"
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout $LATEST_KERNEL_BRANCH
          git merge google-bbr/v3
          curl -O https://raw.githubusercontent.com/878088/BBRv3/main/Patches/0001-netfilter-Add-netfilter-nf_tables-fullcone-support.patch
          curl -O https://raw.githubusercontent.com/878088/BBRv3/main/Patches/0001-tcp-Add-a-sysctl-to-skip-tcp-collapse-processing-whe.patch
          curl -O https://raw.githubusercontent.com/878088/BBRv3/main/Patches/0002-netfilter-add-xt_FLOWOFFLOAD-target.patch
          ls
      - name: Get .config for ${{ matrix.os }}
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
           curl -sSL https://raw.githubusercontent.com/878088/BBRv3/main/aarch64/.config > linux/.config
          elif [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
           curl -sSL https://raw.githubusercontent.com/878088/BBRv3/main/x86_64/.config > linux/.config
          fi
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/sccache
          key: sccache-${{ hashFiles('linux/.config') }}-llvm-${{ matrix.os }}
      - name: Compile Kernel for ${{ matrix.os }}
        working-directory: linux
        env:
          KBUILD_BUILD_TIMESTAMP: ''
          KDEB_COMPRESS: "xz"
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
           make LLVM=1 ARCH=arm64 CC="sccache clang" HOSTCC="sccache clang" olddefconfig
           make -j$(nproc) LLVM=1 ARCH=arm64 CC="sccache clang" HOSTCC="sccache clang" deb-pkg
           elif [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
           make LLVM=1 CC="sccache clang" HOSTCC="sccache clang" olddefconfig
           make -j$(nproc) LLVM=1 CC="sccache clang" HOSTCC="sccache clang" deb-pkg
           fi
      - name: Upload Build Artifact for ${{ matrix.os }}
        uses: actions/upload-artifact@v3
        with:
          name: BBRv3-${{ matrix.os }}
          path: linux-*.deb          
  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: downloaded
        run: ls -R
      - name: Get Latest Stable Version
        id: get_latest_version
        run: |
          version=$(curl -s https://www.kernel.org/releases.json | jq -r '.latest_stable.version')
          echo "version=$version" >> $GITHUB_ENV
      - name: Release
        if: ${{ github.event.inputs.release != 'none' }}
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: "**/*.deb"
          prerelease: ${{ github.event.inputs.release == 'pre-release' }}
          makeLatest: ${{ github.event.inputs.release == 'release' }}
          tag: Debian-Ubuntu-BBRv3-${{ env.version }}
